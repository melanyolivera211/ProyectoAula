/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectoaula.ventanas;


import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.PageSize;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfWriter;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;


import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Luis Maldonado
 */
public class Calcular extends javax.swing.JFrame {

       PreparedStatement ps;
  ResultSet rs;
  
   public static java.sql.Connection getConection(){
     java.sql.Connection con = null;
     try{
       Class.forName("com.mysql.jdbc.Driver");
       con = (java.sql.Connection) DriverManager.getConnection("jdbc:mysql://localhost/login-proyecto","root","");
         System.out.println("Conexion exitosa");
     } catch(Exception e){
         System.out.println(e);
     }
      return con;
     
    }
    public Calcular() {
        initComponents();
         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCampo = new javax.swing.JTextField();
        btnConfirmar = new javax.swing.JButton();
        btnCorreo = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnRegresar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Ingrese su cedula");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 101, 112, 35));
        getContentPane().add(txtCampo, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 154, 93, 39));

        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });
        getContentPane().add(btnConfirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 211, -1, -1));

        btnCorreo.setText("Generar PDF");
        btnCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCorreoActionPerformed(evt);
            }
        });
        getContentPane().add(btnCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 211, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 490, 340));

        pack();
    }// </editor-fold>//GEN-END:initComponents

// Método para calcular el costo mensual de electricidad basado en la cédula
private double calcularCostoMensual(String cedula, double tarifaPorKWh) {
    double costoTotal = 0.0;
    Connection con = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        con = getConection();

        // Verificar que el campo de cédula no esté vacío
        if (cedula.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor ingresa una cédula.");
            return costoTotal;
        }

        // Consulta SQL para obtener todos los registros de GastoMes para la cédula ingresada
        ps = con.prepareStatement("SELECT GastoMes FROM gastos WHERE cedula = ?");
        ps.setString(1, cedula);
        rs = ps.executeQuery();

        // Iterar sobre los registros y sumar los valores de GastoMes
        while (rs.next()) {
            double gastoEnKWh = rs.getDouble("GastoMes");
            costoTotal += gastoEnKWh * tarifaPorKWh;
        }

    } catch (Exception e) {
        System.err.println(e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    return costoTotal;
}

    
    private String obtenerDatosElectrodomesticos(String cedula) {
    StringBuilder datos = new StringBuilder();
    Connection con = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        con = getConection();
        ps = con.prepareStatement("SELECT * FROM gastos WHERE Cedula = ?");
        ps.setString(1, cedula);
        rs = ps.executeQuery();

        while (rs.next()) {
            datos.append("NroSerie: ").append(rs.getString("NroSerie"))
                 .append(", Electrodomestico: ").append(rs.getString("Electrodomestico"))
                 .append(", GastoMes: ").append(rs.getString("GastoMes")).append("\n");
        }

    } catch (Exception e) {
        System.err.println(e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    return datos.toString();
}
    
private void generarPDF(String cedula) {
    Document document = new Document();

    try {
        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("GastosElectrodomesticos.pdf"));
        document.open();

        double tarifaPorKWh = 100;
        double costoMensual = calcularCostoMensual(cedula, tarifaPorKWh);
        String datosElectrodomesticos = obtenerDatosElectrodomesticos(cedula);

        PdfContentByte cb = writer.getDirectContent();
        Graphics g = cb.createGraphicsShapes(PageSize.LETTER.getWidth(), PageSize.LETTER.getHeight());

        Font fontTitulo = new Font("Tahoma", Font.BOLD, 20);
        Font fontTexto = new Font("Tahoma", Font.PLAIN, 12);

        g.setColor(Color.BLACK);
        g.setFont(fontTitulo);
        g.drawString("Reporte de Gastos de Electrodomésticos", 150, 50);

        g.setFont(fontTexto);
        g.drawString("Cédula: " + cedula, 50, 100);
        g.drawString("Datos de Electrodomésticos:", 50, 130);
        g.drawString(datosElectrodomesticos, 50, 150);

        g.drawString("Costo mensual estimado: $" + String.format("%.2f", costoMensual), 50, 300);



    } catch (DocumentException | FileNotFoundException e) {
        System.err.println(e.getMessage());
    } finally {
        document.close();
    }

    JOptionPane.showMessageDialog(this, "Se ha creado el archivo 'GastosElectrodomesticos.pdf'");
}

    
    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
 double tarifaPorKWh = 100; // Tarifa fija por kWh

// Validar que la tarifa sea positiva
if (tarifaPorKWh <= 0) {
    JOptionPane.showMessageDialog(null, "La tarifa por kWh debe ser un valor positivo.");
    return;
}

// Obtener la cédula ingresada
String cedula = txtCampo.getText().trim();

// Validar que el campo de cédula no esté vacío
if (cedula.isEmpty()) {
    JOptionPane.showMessageDialog(null, "El campo de cédula es obligatorio.");
    return;
}

// Validar que la cédula contenga solo números
if (!cedula.matches("\\d+")) {
    JOptionPane.showMessageDialog(null, "La cédula debe contener solo caracteres numéricos.");
    return;
}

try {
    // Llamar al método auxiliar para calcular el costo total
    double costoTotal = calcularCostoMensual(cedula, tarifaPorKWh);

    // Validar si se encontró consumo
    if (costoTotal > 0) {
        JOptionPane.showMessageDialog(null, "El costo total de electricidad para la cédula " + cedula + " es: $" + String.format("%.2f", costoTotal));
    } else {
        JOptionPane.showMessageDialog(null, "No se encontraron registros para la cédula ingresada o no hay consumo registrado.");
    }

} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Ocurrió un error al calcular el costo mensual: " + e.getMessage());
}




    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        Calcular ventanaCalculo = new Calcular();
        this.setVisible(false);
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCorreoActionPerformed
           String cedula = txtCampo.getText();
    if (cedula.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor ingrese una cédula.");
    } else {
        generarPDF(cedula);
    }
        
        
    }//GEN-LAST:event_btnCorreoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calcular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calcular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calcular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calcular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calcular().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnCorreo;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtCampo;
    // End of variables declaration//GEN-END:variables
}
